package io.jenkins.plugins.SQA;

import hudson.model.FreeStyleBuild;
import hudson.model.FreeStyleProject;
import hudson.model.Label;
import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition;
import org.jenkinsci.plugins.workflow.job.WorkflowJob;
import org.jenkinsci.plugins.workflow.job.WorkflowRun;
import org.junit.Rule;
import org.junit.Test;
import org.jvnet.hudson.test.JenkinsRule;

public class SQAPipelineExecutorTest {

    @Rule
    public JenkinsRule jenkins = new JenkinsRule();

    final String exec_token =
            "U2FsdGVkX19g39gcki0MSC80CYiVmKoxQsQ8ywzUs7wEnqq/PEJmDpTyAb1owys/JCN1Mu0Mw7MF4sg8JKo0gA==";
    final String app_url = "https://qa.simplifyqa.app";
    final double threshold = 100;
    final boolean verbose = true;

    @Test
    public void testConfigRoundtrip() throws Exception {
        FreeStyleProject project = jenkins.createFreeStyleProject();
        project.getBuildersList().add(new SQAPipelineBuilder(exec_token, app_url, threshold, verbose));
        project = jenkins.configRoundtrip(project);
        jenkins.assertEqualDataBoundBeans(
                new SQAPipelineBuilder(exec_token, app_url, threshold, verbose),
                project.getBuildersList().get(0));
    }

    @Test
    public void testConfigRoundtripVerbose() throws Exception {
        FreeStyleProject project = jenkins.createFreeStyleProject();
        SQAPipelineBuilder builder = new SQAPipelineBuilder(exec_token, app_url, threshold, verbose);
        builder.setVerbose(true);
        project.getBuildersList().add(builder);
        project = jenkins.configRoundtrip(project);

        SQAPipelineBuilder lhs = new SQAPipelineBuilder(exec_token, app_url, threshold, verbose);
        lhs.setVerbose(true);
        jenkins.assertEqualDataBoundBeans(lhs, project.getBuildersList().get(0));
    }

    @Test
    public void testBuild() throws Exception {
        FreeStyleProject project = jenkins.createFreeStyleProject();
        SQAPipelineBuilder builder = new SQAPipelineBuilder(exec_token, app_url, threshold, verbose);
        project.getBuildersList().add(builder);

        FreeStyleBuild build = jenkins.buildAndAssertSuccess(project);
        jenkins.assertLogContains("Execution triggered", build);
    }

    @Test
    public void testBuildVerbose() throws Exception {

        FreeStyleProject project = jenkins.createFreeStyleProject();
        SQAPipelineBuilder builder = new SQAPipelineBuilder(exec_token, app_url, threshold, verbose);
        builder.setVerbose(true);
        project.getBuildersList().add(builder);

        FreeStyleBuild build = jenkins.buildAndAssertSuccess(project);
        jenkins.assertLogContains("Execution triggered", build);
    }

    @Test
    public void testScriptedPipeline() throws Exception {
        String agentLabel = "my-agent";
        jenkins.createOnlineSlave(Label.get(agentLabel));
        WorkflowJob job = jenkins.createProject(WorkflowJob.class, "test-scripted-pipeline");
        String pipelineScript = "node {SQAPipelineExecutor( exec_token: '" + this.exec_token + "', app_url: '"
                + this.app_url + "', threshold: " + this.threshold + ", verbose: " + this.verbose + ")}";
        job.setDefinition(new CpsFlowDefinition(pipelineScript, true));
        WorkflowRun completedBuild = jenkins.assertBuildStatusSuccess(job.scheduleBuild2(0));
        String expectedString = "Execution triggered";
        jenkins.assertLogContains(expectedString, completedBuild);
    }
}
